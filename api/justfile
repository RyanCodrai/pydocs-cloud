# PyDocs API - Development Commands
# Install just: https://github.com/casey/just
# Run `just` or `just --list` to see all commands

# Default recipe shows help
default:
    @just --list

# Build Docker images (with dependency update)
build:
    uv lock --upgrade
    docker compose -f docker-compose.dev.yaml build

# Start all services (user API, releases API, and database) in separate tabs
start:
    docker compose -f docker-compose.dev.yaml up -d --build

# Start user API inside container
user:
    docker compose -f docker-compose.dev.yaml up -d --build user-api db
    docker exec -it pydocs-user-api bash -c "SERVICE_TYPE=user uvicorn src.main:application --host 0.0.0.0 --port 8080 --reload"

# Start releases API inside container
releases: 
    docker compose -f docker-compose.dev.yaml up -d --build releases-api db
    docker exec -it pydocs-releases-api bash -c "SERVICE_TYPE=releases uvicorn src.main:application --host 0.0.0.0 --port 8081 --reload"

# Stop all containers
stop:
    docker compose -f docker-compose.dev.yaml down

# Restart containers
restart: stop start

# Run all tests with coverage (inside container)
test:
    coverage run -m pytest --log-cli-level=INFO && coverage report

# Run unit tests only (inside container)
test-unit:
    coverage run -m pytest tests/unit --log-cli-level=INFO && coverage report

# Run integration tests only (inside container)
test-integration:
    pytest tests/integration --log-cli-level=INFO

# Recreate PostgreSQL database (WARNING: deletes data)
recreate-db:
    docker stop postgres_db || true
    docker rm postgres_db || true
    docker volume rm api_postgres_data || true
    docker compose -f docker-compose.dev.yaml up -d db
    @echo "âœ… PostgreSQL container and volume recreated"

# Remove all containers and volumes
clean:
    docker compose -f docker-compose.dev.yaml down -v
    docker system prune -f

# Deploy releases API to production (build + terraform apply)
deploy-releases:
    @echo "ðŸ“¦ Building and pushing Docker image to production..."
    gcloud builds submit --config=cloudbuild.yaml --project=pydocs-prod
    @echo "ðŸš€ Deploying to Cloud Run via Terraform..."
    cd ../terraform && terraform apply

